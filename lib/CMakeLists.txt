project (libCppGUI)

#------------------------------------------------------------------------------
#  libCppGUI - A GUI library for C++11/14
#  
#  Copyright 2016 Hans-Peter Gygax
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#-----------------------------------------------------------------------------

set(GENERATED_DIR ${CMAKE_CURRENT_BINARY_DIR}/generated)
set(GENERATED_HEADERS_DIR ${GENERATED_DIR}/headers)

# Rasterized fonts using the GPCFontRasterizer and the GPCBin2C utilities

if (NOT TARGET gpcfontrasterizer)
    message(FATAL_ERROR "gpcfontrasterizer must be available as a CMake target")
endif()
if (NOT TARGET gpcbin2c)
    message(FATAL_ERROR "gpcbin2c must be available as a CMake target")
endif()

set(font_file LiberationSans-Regular)

string(TOLOWER ${font_file} font_name_as_id)
string(REPLACE "-" "_" font_name_as_id ${font_name_as_id})

# TODO: support for sizes by default, make them configurable
# TODO: use a CMake custom function (to be provided by GPCFontRasterizer) as soon as available

file(WRITE ${GENERATED_HEADERS_DIR}/liberationsans_font.h "// liberationsans_font.h  - generated by CMake, DO NOT MODIFY\n")

file(APPEND ${GENERATED_HEADERS_DIR}/liberationsans_font.h
    "template<std::size_t Size> struct ${font_name_as_id} { static constexpr auto get() -> std::pair<const uint8_t *, std::size_t> { return {nullptr, 0}; } };\n\n")

foreach(size IN ITEMS 16 24)

    add_custom_command(
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont
        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/data/fonts/${font_file}.ttf
        COMMAND gpcfontrasterizer ARGS
            input=${CMAKE_CURRENT_SOURCE_DIR}/data/fonts/${font_file}.ttf
            size=${size}
            output="${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont"
            range=all
    )

    add_custom_command(
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${font_file}-${size}.h
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/generated/sources/${font_file}-${size}.c
        DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont
        COMMAND gpcbin2c ARGS
            -i "${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont"
            -c ${font_name_as_id}_${size}
            -h "${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${font_file}-${size}.h"
            -s "${CMAKE_CURRENT_BINARY_DIR}/generated/sources/${font_file}-${size}.c"
    )

    file(APPEND ${GENERATED_HEADERS_DIR}/liberationsans_font.h "extern \"C\" {\n")
    file(APPEND ${GENERATED_HEADERS_DIR}/liberationsans_font.h "#include \"${font_file}-${size}.h\"\n")
    file(APPEND ${GENERATED_HEADERS_DIR}/liberationsans_font.h "}\n")

    list(APPEND FONT_HEADERS ${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${font_file}-${size}.h)
    list(APPEND FONT_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/generated/sources/${font_file}-${size}.c)

    file(APPEND ${GENERATED_HEADERS_DIR}/liberationsans_font.h "
template<> struct ${font_name_as_id}<${size}> {
    static constexpr auto get() -> std::pair<const uint8_t *, std::size_t> {
        return { ${font_name_as_id}_${size}, sizeof(${font_name_as_id}_${size}) };
    }
};

")

endforeach(size)

# TODO: support a variety of sizes

set(font_file MaterialIcons-Regular)

# TODO: change the name
file(WRITE ${GENERATED_HEADERS_DIR}/all_icon_fonts.h "// all_icon_fonts.h  - generated by CMake, DO NOT MODIFY\n")

file(APPEND ${GENERATED_HEADERS_DIR}/all_icon_fonts.h
    "template<std::size_t Size> struct materialicons_regular{ static auto get() -> std::pair<const uint8_t *, std::size_t> { return {nullptr, 0}; } };\n\n")

foreach(size IN ITEMS 12 13 16 20 24 32 36)

    add_custom_command(
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont
        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/data/fonts/${font_file}.ttf
        COMMAND gpcfontrasterizer ARGS
            input=${CMAKE_CURRENT_SOURCE_DIR}/data/fonts/${font_file}.ttf
            size=${size}
            output="${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont"
            range=$E876 range=$E14C range=$E154 range=$E15E range=$E834 range=$E835 range=$E836 range=$E837 range=$E5C5 range=$E5C7
    )

    add_custom_command(
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${font_file}-${size}.h
        DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont
        COMMAND gpcbin2c ARGS
            -i "${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont"
            -o "${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${font_file}-${size}.h"
    )

    list(APPEND FONT_HEADERS ${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${font_file}-${size}.h)

    string(TOLOWER "${font_file}" identifier)
    string(REPLACE "-" "_" identifier ${identifier})
    set(identifier "${identifier}_${size}")

    file(APPEND ${GENERATED_HEADERS_DIR}/all_icon_fonts.h "static const uint8_t ${identifier}[] = {\n")
    file(APPEND ${GENERATED_HEADERS_DIR}/all_icon_fonts.h "    #include \"${font_file}-${size}.h\"\n")
    file(APPEND ${GENERATED_HEADERS_DIR}/all_icon_fonts.h "};\n\n")

    file(APPEND ${GENERATED_HEADERS_DIR}/all_icon_fonts.h "
template<> struct materialicons_regular<${size}>{ static auto get() -> std::pair<const uint8_t *, std::size_t> {
        return { materialicons_regular_${size}, sizeof(materialicons_regular_${size}) };
    }
};
")

endforeach(size)

# Main target

source_group("Implementation files" REGULAR_EXPRESSION "(.*)\\.ipp")

add_library( ${PROJECT_NAME} STATIC

    src/dummy.cpp

    include/cppgui/utils.hpp

    include/cppgui/Default_font.hpp                 include/cppgui/Default_font.ipp

    include/cppgui/basic_types.hpp
    include/cppgui/geometry.hpp
    include/cppgui/unicode.hpp

    #include/cppgui/Text_element.hpp                 include/cppgui/Text_element.ipp
    #include/cppgui/Drag_controller.hpp              include/Drag_controller.ipp

    # Not a real widget, but useful to keep around for development.
    include/cppgui/Widget_template.hpp              include/cppgui/Widget_template.ipp

    include/cppgui/Canvas.hpp                       include/cppgui/Canvas.ipp
    include/cppgui/Widget.hpp                       include/cppgui/Widget.ipp
    include/cppgui/Button.hpp                       include/cppgui/Button.ipp
    include/cppgui/Glyph_button.hpp                 include/cppgui/Glyph_button.ipp
    include/cppgui/Label.hpp                        include/cppgui/Label.ipp
    include/cppgui/Textbox.hpp                      include/cppgui/Textbox.ipp
    include/cppgui/Checkbox.hpp                     include/cppgui/Checkbox.ipp
    include/cppgui/Box.hpp                          include/cppgui/Box.ipp
    include/cppgui/Abstract_container.hpp           include/cppgui/Abstract_container.ipp
    include/cppgui/layout_managers.hpp              include/cppgui/layout_managers.ipp
    include/cppgui/Container_base.hpp               include/cppgui/Container_base.ipp
    #include/cppgui/Container.hpp                    include/cppgui/Container.ipp
    #include/cppgui/Stack.hpp                        include/cppgui/Stack.ipp
    include/cppgui/Root_widget.hpp                  include/cppgui/Root_widget.ipp
    include/cppgui/Vertical_scrollbar.hpp           include/cppgui/Vertical_scrollbar.ipp
    #include/cppgui/Scrollable_pane.hpp              include/cppgui/Scrollable_pane.ipp
    include/cppgui/Scrollbox.hpp                    include/cppgui/Scrollbox.ipp
    #include/cppgui/List_pane.hpp                    include/cppgui/List_pane.ipp
    include/cppgui/Listbox.hpp                      include/cppgui/Listbox.ipp
    include/cppgui/Stringlist.hpp                   include/cppgui/Stringlist.ipp
    include/cppgui/Vertical_slider.hpp              include/cppgui/Vertical_slider.ipp

    include/cppgui/Icon_resources.hpp               # all constexpr -> inline -> no .ipp file

    include/cppgui/layouting.hpp                    include/cppgui/layouting.ipp

    include/cppgui/Resource.hpp
    include/cppgui/Resource_mapper.hpp              include/cppgui/Resource_mapper.ipp
    include/cppgui/Cheap_resource_mapper.hpp        include/cppgui/Cheap_resource_mapper.ipp
    include/cppgui/Full_resource_mapper.hpp         include/cppgui/Full_resource_mapper.ipp

    include/cppgui/GUI_window.hpp                   include/cppgui/GUI_window.ipp

    include/cppgui/all_widgets.hpp
    include/cppgui/all_widgets.ipp

    ${FONT_HEADERS} ${FONT_SOURCES}
    ${GENERATED_HEADERS_DIR}/liberationsans_font.h
    ${GENERATED_HEADERS_DIR}/all_icon_fonts.h
)

target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_BINARY_DIR}/generated/headers) # for the fonts

# libGPCFonts

if (NOT TARGET libGPCFonts)
    message(FATAL_ERROR "libGPCFonts not defined as a CMake target")
endif()
target_link_libraries(${PROJECT_NAME} PRIVATE libGPCFonts)

# libGPCGUIRenderer

if (NOT TARGET libGPCGUIRenderer)
    message(FATAL_ERROR "libGPCGUIRenderer not defined as a CMake target")
endif()
target_link_libraries(${PROJECT_NAME} PUBLIC libGPCGUIRenderer)

# For consumers

target_include_directories(${PROJECT_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)