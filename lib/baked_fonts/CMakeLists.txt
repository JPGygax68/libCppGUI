# Sub-library for libCppGUI, packaging pre-rasterized fonts

project(cppgui_baked_fonts)

include(CMakeParseArguments)


#------------------------------------------------------------------------------
# Prerequisite: font rasterizer command-line tool
#

add_subdirectory(rasterizer)


#------------------------------------------------------------------------------
# Custom rules to generate constant data files
#

function(bake_font font_file)

    # Extract filename components
    get_filename_component(filename ${font_file} NAME_WE)
    get_filename_component(ext      ${font_file} EXT    )

    # Convert filename to ID (lowercase, underscores instead of dashes)
    string(TOLOWER ${filename} font_id)
    string(REPLACE "-" "_" font_id ${font_id})

    cmake_parse_arguments(PARSE_ARGV 1 "" "ALL" "TARGET" "SIZES;CODEPOINTS")

    foreach(size ${_SIZES})

        set(args)
        if (_ALL)
            set(args ${args} "range=all")
        endif()
        if (_CODEPOINTS)
            foreach(cp ${_CODEPOINTS})
                set(args ${args} "cp=${cp}")
            endforeach()
        endif()
        message("args: ${args}")

        set(raster_file "${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${filename}-${size}.rastfont")

        add_custom_command(
            OUTPUT ${raster_file}
            DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/data/fonts/${font_file}
            COMMAND fontrasterizer ARGS
                input=${CMAKE_CURRENT_SOURCE_DIR}/data/fonts/${font_file}
                size=${size}
                output="${raster_file}"
                ${args}
        )

        set(header_file "${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${filename}-${size}.h")
        set(source_file "${CMAKE_CURRENT_BINARY_DIR}/generated/sources/${filename}-${size}.c")

        add_custom_command(
            OUTPUT ${header_file}
            OUTPUT ${source_file}
            DEPENDS ${raster_file}
            # TODO: use "bin2c" instead of "gpcbin2c"
            COMMAND gpcbin2c ARGS
                -i ${raster_file}
                -c ${font_id}_${size}
                -h ${header_file}
                -s ${source_file}
        )

        target_sources(${_TARGET} PRIVATE ${source_file})

    endforeach()

endfunction()


if (0)

set(font_file LiberationSans-Regular)

string(TOLOWER ${font_file} font_name_as_id)
string(REPLACE "-" "_" font_name_as_id ${font_name_as_id})

# TODO: support for sizes by default, make them configurable
# TODO: use a CMake custom function (to be provided by GPCFontRasterizer) as soon as available

# TODO: derive filename from font_file variable
file(WRITE ${GENERATED_HEADERS_DIR}/liberationsans_font.h "// liberationsans_font.h  - generated by CMake, DO NOT MODIFY\n")

file(APPEND ${GENERATED_HEADERS_DIR}/liberationsans_font.h
    "template<std::size_t Size> struct ${font_name_as_id} { static constexpr auto get() -> std::pair<const uint8_t *, std::size_t> { return {nullptr, 0}; } };\n\n")

foreach(size IN ITEMS 16 24)

    add_custom_command(
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont
        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/data/fonts/${font_file}.ttf
        COMMAND fontrasterizer ARGS
            input=${CMAKE_CURRENT_SOURCE_DIR}/data/fonts/${font_file}.ttf
            size=${size}
            output="${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont"
            range=all
    )

    add_custom_command(
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${font_file}-${size}.h
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/generated/sources/${font_file}-${size}.c
        DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont
        COMMAND gpcbin2c ARGS
            -i "${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont"
            -c ${font_name_as_id}_${size}
            -h "${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${font_file}-${size}.h"
            -s "${CMAKE_CURRENT_BINARY_DIR}/generated/sources/${font_file}-${size}.c"
    )

    file(APPEND ${GENERATED_HEADERS_DIR}/liberationsans_font.h "extern \"C\" {\n")
    file(APPEND ${GENERATED_HEADERS_DIR}/liberationsans_font.h "#include \"${font_file}-${size}.h\"\n")
    file(APPEND ${GENERATED_HEADERS_DIR}/liberationsans_font.h "}\n")

    list(APPEND FONT_HEADERS ${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${font_file}-${size}.h)
    list(APPEND FONT_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/generated/sources/${font_file}-${size}.c)

    if (0)
    string(TOLOWER "${font_file}" identifier)
    string(REPLACE "-" "_" identifier ${identifier})
    set(identifier "${identifier}_${size}")
    
    file(APPEND ${GENERATED_HEADERS_DIR}/liberationsans_font.h "
template<> struct ${font_name_as_id}<${size}> {
    static constexpr auto get() -> std::pair<const uint8_t *, std::size_t> {
        return { ${font_name_as_id}_${size}, sizeof(${font_name_as_id}_${size}) };
    }
};

")
    endif(0)

endforeach(size)

endif(0)

if (0)

# TODO: support a variety of sizes

#set(font_file MaterialIcons-Regular.ttf)
#set(font_ext .ttf)
set(font_file modernpics)
set(font_ext .otf)

string(TOLOWER ${font_file} font_name_as_id)
string(REPLACE "-" "_" font_name_as_id ${font_name_as_id})

# TODO: change the name
#file(WRITE ${GENERATED_HEADERS_DIR}/all_icon_fonts.h "// all_icon_fonts.h  - generated by CMake, DO NOT MODIFY\n")

#file(APPEND ${GENERATED_HEADERS_DIR}/all_icon_fonts.h
#    "template<std::size_t Size> struct materialicons_regular{ static auto get() -> std::pair<const uint8_t *, std::size_t> { return {nullptr, 0}; } };\n\n")

foreach(size IN ITEMS 18)   # 12 13 16 20 24 32 36)

    add_custom_command(
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont
        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/data/fonts/${font_file}${font_ext}
        COMMAND fontrasterizer ARGS
            input=${CMAKE_CURRENT_SOURCE_DIR}/data/fonts/${font_file}${font_ext}
            size=${size}
            output="${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont"
            cp=$0025 cp=$3E
            #range=$E876 range=$E14C range=$E154 range=$E15E range=$E834 range=$E835 range=$E836 range=$E837 range=$E5C5 range=$E5C7
    )

    add_custom_command(
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${font_file}-${size}.h
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/generated/sources/${font_file}-${size}.c
        DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont
        COMMAND gpcbin2c ARGS
            -i "${CMAKE_CURRENT_BINARY_DIR}/generated/rastfont/${font_file}-${size}.rastfont"
            -c ${font_name_as_id}_${size}
            -h "${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${font_file}-${size}.h"
            -s "${CMAKE_CURRENT_BINARY_DIR}/generated/sources/${font_file}-${size}.c"
    )

    # TODO: derive filename from variable
    file(APPEND ${GENERATED_HEADERS_DIR}/${font_name_as_id}.h "extern \"C\" {\n")
    file(APPEND ${GENERATED_HEADERS_DIR}/${font_name_as_id}.h "#include \"${font_file}-${size}.h\"\n")
    file(APPEND ${GENERATED_HEADERS_DIR}/${font_name_as_id}.h "}\n")

    list(APPEND FONT_HEADERS ${CMAKE_CURRENT_BINARY_DIR}/generated/headers/${font_file}-${size}.h)
    list(APPEND FONT_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/generated/sources/${font_file}-${size}.c)

    if (0)
    string(TOLOWER "${font_file}" identifier)
    string(REPLACE "-" "_" identifier ${identifier})
    set(identifier "${identifier}_${size}")

    file(APPEND ${GENERATED_HEADERS_DIR}/all_icon_fonts.h "static const uint8_t ${identifier}[] = {\n")
    file(APPEND ${GENERATED_HEADERS_DIR}/all_icon_fonts.h "    #include \"${font_file}-${size}.h\"\n")
    file(APPEND ${GENERATED_HEADERS_DIR}/all_icon_fonts.h "};\n\n")

    file(APPEND ${GENERATED_HEADERS_DIR}/all_icon_fonts.h "
template<> struct materialicons_regular<${size}>{ static auto get() -> std::pair<const uint8_t *, std::size_t> {
        return { materialicons_regular_${size}, sizeof(materialicons_regular_${size}) };
    }
};
")
    endif(0)

endforeach(size)

endif(0)

#------------------------------------------------------------------------------
# Main target: static sub-library
#

add_library(${PROJECT_NAME}
STATIC
    ${FONT_HEADERS}
    ${FONT_SOURCES}
    include/cppgui/baked_fonts.hpp      src/baked_fonts.cpp
    ${PROJECT_BINARY_DIR}/cppgui_baked_fonts_config.hpp
)

bake_font("LiberationSans-Regular.ttf" SIZES 16 24 ALL TARGET ${PROJECT_NAME})
bake_font("modernpics.otf"             SIZES 18 24 CODEPOINTS $25 $3E TARGET ${PROJECT_NAME})



target_include_directories(${PROJECT_NAME} PRIVATE ${PROJECT_SOURCE_DIR}/include/cppgui)
target_include_directories(${PROJECT_NAME} PUBLIC  ${PROJECT_SOURCE_DIR}/include)

# Generate configuration file and make it available to target and consumers
configure_file("${PROJECT_SOURCE_DIR}/cppgui_baked_fonts_config.in.hpp"
               "${PROJECT_BINARY_DIR}/cppgui_baked_fonts_config.hpp" )
target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_BINARY_DIR})


